# -*- mode: ruby -*-
# vi: set ft=ruby :
EXTERNAL_IP = "192.168.33.10"
KUBERNETES_VERSION = "1.21.0"
CRI_TOOLS_VERSION = "1.21.0"

required_plugins = %w(vagrant-vbguest)

required_plugins.each do |plugin|
  need_restart = false
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    need_restart = true
  end
  exec "vagrant #{ARGV.join(' ')}" if need_restart
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/hirsute64"

  config.vm.define "ubuntu-minikube"

  # if Vagrant.has_plugin?("vagrant-vbguest")
  #   # set auto_update to false, if you do NOT want to check the correct 
  #   # additions version when booting this machine
  #   config.vbguest.auto_update = false
    
  #   # # do NOT download the iso file from a webserver
  #   config.vbguest.no_remote = true
  #   config.vbguest.no_install = true
  # end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: EXTERNAL_IP

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.cpus = 2
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #################################################################################################
  # Need this extra provision step with reset: true otherwise the vagrant user cant access docker #
  #################################################################################################
  config.vm.provision "shell", env: {"EXTERNAL_IP" => EXTERNAL_IP, "KUBERNETES_VERSION" => KUBERNETES_VERSION}, privileged: false, reset: true, inline: <<-SHELL
    #!/bin/bash

    # Update apt and get dependencies
    sudo apt-get -y update
    sudo apt-get -y upgrade
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y zip unzip curl git conntrack
    
    # Install docker (needed for minikube vm-driver none)
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg 2>/dev/null | sudo apt-key add -
    sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
    sudo apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-compose
    # Add vagrant user to the docker group 
    sudo usermod -aG docker vagrant
  SHELL
  
  config.vm.provision "shell", env: {"EXTERNAL_IP" => EXTERNAL_IP, "KUBERNETES_VERSION" => KUBERNETES_VERSION}, privileged: false, inline: <<-SHELL
    #!/bin/bash
    groups vagrant
    echo "check if the vagrant user can access docker"
    docker ps

    # Install helm
    echo "Installing Helm"
    sudo curl -q https://baltocdn.com/helm/signing.asc 2>/dev/null | sudo apt-key add -
    sudo apt-get install apt-transport-https --yes
    sudo add-apt-repository -y "deb https://baltocdn.com/helm/stable/debian/ all main"
    sudo apt-get update
    sudo apt-get install helm

    # Install minikube
    echo "Downloading Minikube"
    curl -q -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 2>/dev/null
    chmod +x minikube
    sudo mv minikube /usr/local/bin/
    # Install crictl

    echo "Downloading crictl"
    curl -qL https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz 2>/dev/null | tar xzvf -
    chmod +x crictl
    sudo mv crictl /usr/local/bin/

    # Install kubectl
    echo "Downloading kubectl"
    curl -q -LO "https://dl.k8s.io/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" 2>/dev/null 
    curl -q -LO "https://dl.k8s.io/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl.sha256" 2>/dev/null 
    echo "$(<kubectl.sha256) kubectl" | sha256sum --check
    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # Setup minikube
    echo "127.0.0.1 minikube minikube." | sudo tee -a /etc/hosts
    mkdir -p $HOME/.minikube
    mkdir -p $HOME/.kube
    touch $HOME/.kube/config

    # Permissions
    sudo chown -R $USER:$USER $HOME/.kube
    sudo chown -R $USER:$USER $HOME/.minikube

    # Login to the new group docker
    echo "Re-Login to docker group"
    newgrp docker
    groups vagrant
    export MINIKUBE_WANTUPDATENOTIFICATION=false
    export MINIKUBE_WANTREPORTERRORPROMPT=false
    export MINIKUBE_HOME=$HOME
    export CHANGE_MINIKUBE_NONE_USER=true
    export KUBECONFIG=$HOME/.kube/config
    export KUBERNETES_VERSION=${KUBERNETES_VERSION}
    export CHANGE_MINIKUBE_NONE_USER=$USER
    export SUDO_USER=$USER
    export MINIKUBE_ARGS="--vm-driver docker --kubernetes-version v${KUBERNETES_VERSION} --bootstrapper kubeadm"

    # Disable SWAP since is not supported on a kubernetes cluster
    sudo swapoff -a

    ## Start minikube

    minikube start ${MINIKUBE_ARGS} 2>/dev/null

    ## Addons
    minikube addons enable ingress

    ## Configure vagrant clients dir
    printf "# Minikube configuration \n" >> /home/vagrant/.bashrc
    printf "alias docker-env='source <(minikube -p minikube docker-env)'\n" >> /home/vagrant/.bashrc
    printf "export MINIKUBE_WANTUPDATENOTIFICATION=false\n" >> /home/vagrant/.bashrc
    printf "export MINIKUBE_ARGS='${MINIKUBE_ARGS}'\n" >> /home/vagrant/.bashrc
    printf "export MINIKUBE_WANTREPORTERRORPROMPT=false\n" >> /home/vagrant/.bashrc
    printf "export MINIKUBE_HOME=/home/vagrant\n" >> /home/vagrant/.bashrc
    printf "export CHANGE_MINIKUBE_NONE_USER=true\n" >> /home/vagrant/.bashrc
    printf "export KUBECONFIG=/home/vagrant/.kube/config\n" >> /home/vagrant/.bashrc
    printf "export KUBERNETES_VERSION=${KUBERNETES_VERSION}\n" >> /home/vagrant/.bashrc
    printf "export CHANGE_MINIKUBE_NONE_USER=$USER\n" >> /home/vagrant/.bashrc
    printf "export SUDO_USER=$USER\n" >> /home/vagrant/.bashrc
    printf "source <(kubectl completion bash)\n" >> /home/vagrant/.bashrc
    printf "echo 'This box definition is part of the following github repository. \nhttps://github.com/fr123k/vagrant-boxes'\n" >> /home/vagrant/.bashrc
    printf "cat << EOF\nRun the following commands: \n * to start minikube: minikube start \\\${MINIKUBE_ARGS}\n" >> /home/vagrant/.bashrc
    printf " * setup minikube docker-env: docker-env\nEOF\n" >> /home/vagrant/.bashrc
    # Enforce sysctl
    sudo sysctl -w vm.max_map_count=262144
    sudo echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.d/90-vm_max_map_count.conf
    
    minikube status 

    # Stop
    minikube stop
  SHELL
end
